// Generated by gencpp from file custom_messages/custom.msg
// DO NOT EDIT!


#ifndef CUSTOM_MESSAGES_MESSAGE_CUSTOM_H
#define CUSTOM_MESSAGES_MESSAGE_CUSTOM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>

namespace custom_messages
{
template <class ContainerAllocator>
struct custom_
{
  typedef custom_<ContainerAllocator> Type;

  custom_()
    : x_R()
    , y_R()
    , z_R()
    , alpha_R()
    , beta_R()
    , gamma_R()
    , x_L()
    , y_L()
    , z_L()
    , alpha_L()
    , beta_L()
    , gamma_L()  {
    }
  custom_(const ContainerAllocator& _alloc)
    : x_R(_alloc)
    , y_R(_alloc)
    , z_R(_alloc)
    , alpha_R(_alloc)
    , beta_R(_alloc)
    , gamma_R(_alloc)
    , x_L(_alloc)
    , y_L(_alloc)
    , z_L(_alloc)
    , alpha_L(_alloc)
    , beta_L(_alloc)
    , gamma_L(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float64_<ContainerAllocator>  _x_R_type;
  _x_R_type x_R;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _y_R_type;
  _y_R_type y_R;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _z_R_type;
  _z_R_type z_R;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _alpha_R_type;
  _alpha_R_type alpha_R;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _beta_R_type;
  _beta_R_type beta_R;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _gamma_R_type;
  _gamma_R_type gamma_R;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _x_L_type;
  _x_L_type x_L;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _y_L_type;
  _y_L_type y_L;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _z_L_type;
  _z_L_type z_L;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _alpha_L_type;
  _alpha_L_type alpha_L;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _beta_L_type;
  _beta_L_type beta_L;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _gamma_L_type;
  _gamma_L_type gamma_L;





  typedef boost::shared_ptr< ::custom_messages::custom_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_messages::custom_<ContainerAllocator> const> ConstPtr;

}; // struct custom_

typedef ::custom_messages::custom_<std::allocator<void> > custom;

typedef boost::shared_ptr< ::custom_messages::custom > customPtr;
typedef boost::shared_ptr< ::custom_messages::custom const> customConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_messages::custom_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_messages::custom_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_messages::custom_<ContainerAllocator1> & lhs, const ::custom_messages::custom_<ContainerAllocator2> & rhs)
{
  return lhs.x_R == rhs.x_R &&
    lhs.y_R == rhs.y_R &&
    lhs.z_R == rhs.z_R &&
    lhs.alpha_R == rhs.alpha_R &&
    lhs.beta_R == rhs.beta_R &&
    lhs.gamma_R == rhs.gamma_R &&
    lhs.x_L == rhs.x_L &&
    lhs.y_L == rhs.y_L &&
    lhs.z_L == rhs.z_L &&
    lhs.alpha_L == rhs.alpha_L &&
    lhs.beta_L == rhs.beta_L &&
    lhs.gamma_L == rhs.gamma_L;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_messages::custom_<ContainerAllocator1> & lhs, const ::custom_messages::custom_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_messages::custom_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_messages::custom_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_messages::custom_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_messages::custom_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_messages::custom_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_messages::custom_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_messages::custom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "128e291c79655ee6df15d3b35f1bf391";
  }

  static const char* value(const ::custom_messages::custom_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x128e291c79655ee6ULL;
  static const uint64_t static_value2 = 0xdf15d3b35f1bf391ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_messages::custom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_messages/custom";
  }

  static const char* value(const ::custom_messages::custom_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_messages::custom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float64 x_R\n"
"std_msgs/Float64 y_R\n"
"std_msgs/Float64 z_R\n"
"std_msgs/Float64 alpha_R\n"
"std_msgs/Float64 beta_R\n"
"std_msgs/Float64 gamma_R\n"
"std_msgs/Float64 x_L\n"
"std_msgs/Float64 y_L\n"
"std_msgs/Float64 z_L\n"
"std_msgs/Float64 alpha_L\n"
"std_msgs/Float64 beta_L\n"
"std_msgs/Float64 gamma_L\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::custom_messages::custom_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_messages::custom_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_R);
      stream.next(m.y_R);
      stream.next(m.z_R);
      stream.next(m.alpha_R);
      stream.next(m.beta_R);
      stream.next(m.gamma_R);
      stream.next(m.x_L);
      stream.next(m.y_L);
      stream.next(m.z_L);
      stream.next(m.alpha_L);
      stream.next(m.beta_L);
      stream.next(m.gamma_L);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct custom_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_messages::custom_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_messages::custom_<ContainerAllocator>& v)
  {
    s << indent << "x_R: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.x_R);
    s << indent << "y_R: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.y_R);
    s << indent << "z_R: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.z_R);
    s << indent << "alpha_R: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.alpha_R);
    s << indent << "beta_R: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.beta_R);
    s << indent << "gamma_R: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.gamma_R);
    s << indent << "x_L: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.x_L);
    s << indent << "y_L: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.y_L);
    s << indent << "z_L: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.z_L);
    s << indent << "alpha_L: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.alpha_L);
    s << indent << "beta_L: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.beta_L);
    s << indent << "gamma_L: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.gamma_L);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MESSAGES_MESSAGE_CUSTOM_H
